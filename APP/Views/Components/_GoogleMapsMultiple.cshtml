@model IEnumerable<CodeData_Connection.Models.Database.Entidade.Endereco>

<div id="map" style="height: 50rem;"></div>

<script>
    (g => { var h, a, k, p = "The Google Maps JavaScript API", c = "google", l = "importLibrary", q = "__ib__", m = document, b = window; b = b[c] || (b[c] = {}); var d = b.maps || (b.maps = {}), r = new Set, e = new URLSearchParams, u = () => h || (h = new Promise(async (f, n) => { await (a = m.createElement("script")); e.set("libraries", [...r] + ""); for (k in g) e.set(k.replace(/[A-Z]/g, t => "_" + t[0].toLowerCase()), g[k]); e.set("callback", c + ".maps." + q); a.src = `https://maps.${c}apis.com/maps/api/js?` + e; d[q] = f; a.onerror = () => h = n(Error(p + " could not load.")); a.nonce = m.querySelector("script[nonce]")?.nonce || ""; m.head.append(a) })); d[l] ? console.warn(p + " only loads once. Ignoring:", g) : d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n)) })({
        key: "AIzaSyBT6VVRMlElM3uC1bAm9KlmkoG6Kv88fMw",
        v: "weekly",
        // Use the 'v' parameter to indicate the version to use (weekly, beta, alpha, etc.).
        // Add other bootstrap parameters as needed, using camel case.
    });

    async function initMap() {
        const { Map } = await google.maps.importLibrary("maps");
        const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");

        const mapCenter = { lat: -22.926506007396114, lng: -47.075046998329476 };

        const map = new Map(document.getElementById("map"), {
            zoom: 5,
            center: mapCenter,
            mapId: "CodeData-Map"
        });

        const locations = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));

        locations.forEach((location) => {

            if (location != null) {
                var marker = new AdvancedMarkerElement({
                    map,
                    position: { lat: location.Localizacao.XCoordinate, lng: location.Localizacao.YCoordinate },
                });
            }
        });
    }

    initMap()
</script>