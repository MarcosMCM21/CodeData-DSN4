@model MySql.Data.Types.MySqlGeometry

<div id="map" style="height: 40rem;"></div>

<script>
    (g => { var h, a, k, p = "The Google Maps JavaScript API", c = "google", l = "importLibrary", q = "__ib__", m = document, b = window; b = b[c] || (b[c] = {}); var d = b.maps || (b.maps = {}), r = new Set, e = new URLSearchParams, u = () => h || (h = new Promise(async (f, n) => { await (a = m.createElement("script")); e.set("libraries", [...r] + ""); for (k in g) e.set(k.replace(/[A-Z]/g, t => "_" + t[0].toLowerCase()), g[k]); e.set("callback", c + ".maps." + q); a.src = `https://maps.${c}apis.com/maps/api/js?` + e; d[q] = f; a.onerror = () => h = n(Error(p + " could not load.")); a.nonce = m.querySelector("script[nonce]")?.nonce || ""; m.head.append(a) })); d[l] ? console.warn(p + " only loads once. Ignoring:", g) : d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n)) })({
        key: "AIzaSyBT6VVRMlElM3uC1bAm9KlmkoG6Kv88fMw",
        v: "weekly",
        // Use the 'v' parameter to indicate the version to use (weekly, beta, alpha, etc.).
        // Add other bootstrap parameters as needed, using camel case.
    });

    async function initMap() {
        const { Map } = await google.maps.importLibrary("maps");
        const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");

        let lat = "@Model.XCoordinate"
        let lng = "@Model.YCoordinate"

        let latFMT = parseFloat(lat.replace(/,/g, "."))
        let lngFMT = parseFloat(lng.replace(/,/g, "."))

        var localizacao = { lat: latFMT , lng: lngFMT };

        if (localizacao != null) {
            const map = new Map(document.getElementById('map'), {
                zoom: 18,
                center: localizacao,
                mapId: "CodeData-Map"
            });

            const marker = new AdvancedMarkerElement({
                position: localizacao,
                map: map
            });
        }
    }

    initMap()
</script>